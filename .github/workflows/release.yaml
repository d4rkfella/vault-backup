name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version tag (format: vX.Y.Z)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v.5.0.0
        with:
          fetch-depth: 0

      - name: Validate semver format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?(\+[a-zA-Z0-9\.]+)?$ ]]; then
            echo "Error: Invalid version format. Use semantic versioning (e.g., v1.0.0)"
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: '1.24.2'
      
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: golangci-lint run ./...

      - name: Run tests
        run: |
          go test -v -coverprofile=coverage.out ./...

          echo "Test Coverage:"
          go tool cover -func=coverage.out | grep total:

          go tool cover -html=coverage.out -o coverage.html

          COVERAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Create annotated tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ inputs.version }}" -m "Release ${{ inputs.version }}"
          git push origin "${{ inputs.version }}"

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed -n 2p)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: "${{ inputs.version }}"
          name: "Release ${{ inputs.version }}"
          commit: ${{ github.sha }}
          body: |
            ${{ steps.prev_tag.outputs.prev_tag && format('**Changes since {0}**: https://github.com/{1}/compare/{0}...{2}', steps.prev_tag.outputs.prev_tag, github.repository, inputs.version) || 'Initial release' }}
          generateReleaseNotes: false
          token: ${{ secrets.GITHUB_TOKEN }}